---
// src/components/ThemeSwitcher.astro
import config from '@/config';
---

<div class="flex flex-col justify-center theme-switcher">
  <input
    type="checkbox"
    name="light-switch"
    class="light-switch sr-only"
    id="themeswitcherxd"
  />
  <label class="relative cursor-pointer" for="themeswitcherxd">
    <svg
      class="hidden dark:block"
      width="16"
      height="16"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        class="fill-darkText"
        d="M7 0h2v2H7zM12.88 1.637l1.414 1.415-1.415 1.413-1.413-1.414zM14 7h2v2h-2zM12.95 14.433l-1.414-1.413 1.413-1.415 1.415 1.414zM7 14h2v2H7zM2.98 14.364l-1.413-1.415 1.414-1.414 1.414 1.415zM0 7h2v2H0zM3.05 1.706 4.463 3.12 3.05 4.535 1.636 3.12z"
      ></path>
      <path
        class="fill-darkText"
        d="M8 4C5.8 4 4 5.8 4 8s1.8 4 4 4 4-1.8 4-4-1.8-4-4-4Z"
      ></path>
    </svg>
    <svg
      class="dark:hidden"
      width="16"
      height="16"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        class="fill-text"
        d="M6.2 1C3.2 1.8 1 4.6 1 7.9 1 11.8 4.2 15 8.1 15c3.3 0 6-2.2 6.9-5.2C9.7 11.2 4.8 6.3 6.2 1Z"
      ></path>
      <path
        class="fill-text"
        d="M12.5 5a.625.625 0 0 1-.625-.625 1.252 1.252 0 0 0-1.25-1.25.625.625 0 1 1 0-1.25 1.252 1.252 0 0 0 1.25-1.25.625.625 0 1 1 1.25 0c.001.69.56 1.249 1.25 1.25a.625.625 0 1 1 0 1.25c-.69.001-1.249.56-1.25 1.25A.625.625 0 0 1 12.5 5Z"
      ></path>
    </svg>
    <span class="sr-only">Switch to light / dark version</span>
  </label>
</div>

<script define:vars={{ themes: config.themes }}>
  // Function to initialize theme
  function initializeTheme() {
    const savedTheme = localStorage.getItem('theme');
    const element = document.documentElement;

    if (savedTheme) {
      const isDark = savedTheme === 'dark';
      element.classList.toggle('dark', isDark);
      element.setAttribute('data-theme', themes[isDark ? 'dark' : 'light']);
    } else {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      element.classList.toggle('dark', prefersDark);
      element.setAttribute('data-theme', themes[prefersDark ? 'dark' : 'light']);
    }

    // Update checkbox state to match current theme
    const checkbox = document.getElementById('themeswitcherxd');
    if (checkbox) {
      checkbox.checked = element.classList.contains('dark');
    }
  }

  // Initialize theme when DOM is ready
  document.addEventListener('DOMContentLoaded', initializeTheme);

  // Handle theme toggle
  function handleToggleClick() {
    const element = document.documentElement;
    element.classList.toggle('dark');

    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');

    element.setAttribute('data-theme', themes[isDark ? 'dark' : 'light']);
  }

  // Add listener for system theme changes
  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
  const handleMediaChange = (e) => {
    if (!localStorage.getItem('theme')) {
      const element = document.documentElement;
      element.classList.toggle('dark', e.matches);
      element.setAttribute('data-theme', themes[e.matches ? 'dark' : 'light']);

      // Update checkbox state
      const checkbox = document.getElementById('themeswitcherxd');
      if (checkbox) {
        checkbox.checked = e.matches;
      }
    }
  };

  mediaQuery.addEventListener('change', handleMediaChange);

  // Add event listener to checkbox
  document.getElementById('themeswitcherxd')?.addEventListener('change', handleToggleClick);

  // Initialize the theme when script runs (client-side only)
  initializeTheme();
</script>

<style>
  /* Add any component-specific styles here */
  .theme-switcher {
    opacity: 1;
    visibility: visible;
  }
</style>
