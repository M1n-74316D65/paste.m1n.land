---
import {
  getMarkdownGists,
  getCommentsByGist,
  getGistPaths,
  type Gist,
  type Comment,
} from '@/utils/services'
import Layout from '@/layouts/BlogPost.astro'
import CommentList from '@/components/CommentList.astro'
import { formatDate, renderMarkdown } from '@/utils/helpers'

// Define the return type for getStaticPaths
export async function getStaticPaths() {
  const markdownFileNames = await getGistPaths()

  return markdownFileNames.map((fileName) => ({
    params: { slug: fileName },
  }))
}

// Get slug from params
const { slug } = Astro.params

// Type guard to ensure slug is defined
if (!slug) {
  return Astro.redirect('/404')
}

// Fetch data with error handling
let gist: Gist | undefined
let processedComments: (Comment & { renderedBody?: string })[] = []

try {
  const markdownGists = await getMarkdownGists()
  gist = markdownGists.find((g) => g.markdownFileName === slug)

  // Handle 404 case
  if (!gist) {
    return Astro.redirect('/404')
  }

  // Fetch and process comments
  const comments = await getCommentsByGist(gist)
  processedComments = await Promise.all(
    comments.map(async (comment) => ({
      ...comment,
      renderedBody: await renderMarkdown(comment.body),
    })),
  )
} catch (error) {
  console.error('Error fetching article data:', error)
  return Astro.redirect('/error')
}

// Create frontmatter object
const frontmatter = {
  title: gist.title || gist.description,
  pubDate: formatDate(gist.created_at),
  // Add additional metadata if available
  ...(gist.metaData?.category && { category: gist.metaData.category }),
  ...(gist.metaData?.tags && { tags: gist.metaData.tags }),
  ...(gist.readingTime && { readingTime: gist.readingTime }),
}

// Process the main article content
const renderedArticleContent = await renderMarkdown(gist.markdownContent || '')
---

<Layout frontmatter={frontmatter}>
  <article class="mb-6">
    <div
      class="prose max-w-none dark:prose-invert"
      set:html={renderedArticleContent}
    />
  </article>

  {processedComments.length > 0 && <CommentList comments={processedComments} />}
</Layout>
